# This stack contains basic components for custom resource which allows you to
# retrieve information about rds cluster by specified pattern for
# `DBClusterIdentifier`. It contains lambda function and a role for the lambda.
# To start you should deploy this stack to the region and the account where you
# want to use it, then add custom resource with desired search parameters into
# you stack:
#
# AuroraClusterInfo:
#   Type: Custom::AuroraClusterInfo
#   Properties:
#     ServiceToken: !ImportValue Custom--AuroraClusterInfoFunction--Arn
#     Region: !Ref "AWS::Region"
#     DBClusterIdentifierPattern: ^pre-stage-cluster.*
#
# After that, you can get information as follows: `!GetAtt AuroraClusterInfo.Endpoint`
# Full list of available attributes see in the docs for `describe_db_clusters`.
Description: Holds custom resource for retrieving Aurora cluster info
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  AuroraClusterInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import re
          import boto3
          import cfnresponse
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  rds = boto3.client('rds')
                  pattern = event['ResourceProperties']['DBClusterIdentifierPattern']
                  print('Pattern:', pattern)
                  regex = re.compile(pattern)
                  clusters = rds.describe_db_clusters()['DBClusters']
                  clusters = [cluster for cluster in clusters if regex.match(cluster['DBClusterIdentifier'])]
                  if len(clusters) > 0:
                      raise ValueError('More than one candidates found: {}'.format([i['DBClusterIdentifier'] for i in clusters]))
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, clusters[0])
              except Exception as e:
                  err = '{}: {}'.format(e.__class__.__name__, str(e))
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Reason': err})
      Handler: index.handler
      Runtime: python3.6
      Timeout: 30
      Role:
        Fn::GetAtt: AuroraClusterInfoLambdaExecutionRole.Arn
  AuroraClusterInfoLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - rds:DescribeDBClusters
            Resource: "*"
Outputs:
  AuroraClusterInfoFunctionArnOutput:
    Value: !GetAtt AuroraClusterInfoFunction.Arn
    Export:
      Name: Custom--AuroraClusterInfoFunction--Arn